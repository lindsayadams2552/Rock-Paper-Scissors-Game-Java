package RockPaperScissorsGame;

//Lindsay Adams
//08/04/2023
//Professor Ruiz
//Rock-Paper-Scissors-Project
/* In this project, the user can play Rock-paper-Scissors with the computer. The purpose of this game 
 * is to randomly generate either Rock, Paper, or Scissors, take in user-input, and ouput whether the
 * user has tied, won, or lost against the computer. Functionality wise, the user must press the rock,
 * paper, or scissors button on their screen to determine their results. If the user wishes to restart
 * the game and see the welcome/instructions menu, they can click the RESTART button. If the user
 * wishes to exit the game entirely, they can click the EXIT button. 
 */

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author linds
 */

import javax.swing.*;
import java.awt.Color;


public class NewJFrame extends javax.swing.JFrame {
// 3. Declare and initialize variables to store player's and computer's choices.
    String userChoices;
    String comChoice;
  

    public NewJFrame() {
        initComponents();
        //Center the various labels on the GUI
        result.setHorizontalAlignment(SwingConstants.CENTER);
        compChoice.setHorizontalAlignment(SwingConstants.CENTER);
        userChoice.setHorizontalAlignment(SwingConstants.CENTER);
        title.setHorizontalAlignment(SwingConstants.CENTER);
        
        //Makes the labels appear blank until a button is clicked
        result.setText(" ");
        compChoice.setText(" ");
        userChoice.setText(" ");
        
        //Sets the size of GUI window
        setSize(1200, 950);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        rock = new javax.swing.JButton();
        paper = new javax.swing.JButton();
        scissors = new javax.swing.JButton();
        compChoice = new javax.swing.JLabel();
        userChoice = new javax.swing.JLabel();
        welcome = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        result = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Segoe UI Emoji", 1, 48)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Rock-Paper-Scissors");

        rock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RockPaperScissorsGame/rockImg.jpg"))); // NOI18N
        rock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rockActionPerformed(evt);
            }
        });

        paper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RockPaperScissorsGame/paperImg.jpg"))); // NOI18N
        paper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperActionPerformed(evt);
            }
        });

        scissors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RockPaperScissorsGame/scissorsImg.jpg"))); // NOI18N
        scissors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scissorsActionPerformed(evt);
            }
        });

        compChoice.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        compChoice.setText("compChoice");

        userChoice.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        userChoice.setText("userChoice");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Welcome to Rock-Paper-Scissors! \n\nRules of the game:\n\nPick from one of the three images above:\n\t- Rock: Image of the fist\n\t- Paper: Image of the hand with all fingers extended outwards.\n\t- Scissors: Image of the hand with two fingers extended outwards.\n\nThe outcome of the game is determined by:\n\t- Rock crushes Scissors: Rock wins.\n\t- Scissors cut Paper: Scissors win.\n\t- Paper covers Rock: Paper wins.\n\nIf both players pick the same outcome, the game results in a tie.\n\nIf you wish to exit or reset the game, click the button accordingly!");
        welcome.setViewportView(jTextArea1);

        result.setFont(new java.awt.Font("Segoe UI Semibold", 1, 36)); // NOI18N
        result.setText("result");
        result.setToolTipText("");
        result.setAlignmentX(0.5F);
        result.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        reset.setText("RESET");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        exit.setText("EXIT");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(rock)
                .addGap(135, 135, 135)
                .addComponent(paper)
                .addGap(115, 115, 115)
                .addComponent(scissors)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userChoice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(compChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(result, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exit)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 150, Short.MAX_VALUE)
                .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 917, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scissors)
                    .addComponent(rock)
                    .addComponent(paper))
                .addGap(27, 27, 27)
                .addComponent(compChoice)
                .addGap(18, 18, 18)
                .addComponent(userChoice)
                .addGap(18, 18, 18)
                .addComponent(result)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset)
                    .addComponent(exit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(170, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//4. Implement action listeners for the buttons:
    //ROCK BUTTON
    private void rockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rockActionPerformed
        // Hides the welcome menu
        welcome.setVisible(false);
        //Set the player's choice to "Rock."
        userChoices = "Rock";
        //Call a function to determine the computer's choice randomly (Rock, Paper, or Scissors).
        comChoice = randz();
         //Call a function to determine the game result (Win, Lose, or Draw) based on choices.
        if(gameResult(userChoices,comChoice).equals("Draw")){           
            result.setText("Its a tie!");
            //Sets text to black if the result is a tie
            result.setForeground(Color.BLACK);
        }
        else if(gameResult(userChoices,comChoice).equals("Lose")){           
            result.setText("Paper covers rock, Computer wins!");
            //Sets text to red if the result is a tie
            result.setForeground(Color.RED);
        }
        else if(gameResult(userChoices,comChoice).equals("Win")){
            result.setText("Rock crushes scissors, User wins!");
            //Sets text to dark green if the result is a tie
            Color darkGreen = new Color(0, 128, 0);
            result.setForeground(darkGreen);
        }
        
        //Display the computer's choice and the game result in the respective labels.
        userChoice.setText("User's choice: " + userChoices);
        compChoice.setText("Computer's choice: " + comChoice);
    }//GEN-LAST:event_rockActionPerformed

    //PAPER BUTTON
    private void paperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperActionPerformed
        // Hides the welcome menu
        welcome.setVisible(false);
        //Set the player's choice to "Paper."
        userChoices = "Paper";
        //Call a function to determine the computer's choice randomly (Rock, Paper, or Scissors).
        comChoice = randz();
        //Call a function to determine the game result (Win, Lose, or Draw) based on choices.
        if(gameResult(userChoices,comChoice).equals("Draw")){           
            result.setText("Its a tie!");
            //Sets text to black if the result is a tie
            result.setForeground(Color.BLACK);
        }
        else if(gameResult(userChoices,comChoice).equals("Lose")){           
            result.setText("Paper covers rock, Computer wins!");
            //Sets text to red if the result is a tie
            result.setForeground(Color.RED);
        }
        else if(gameResult(userChoices,comChoice).equals("Win")){
            result.setText("Rock crushes scissors, User wins!");
            //Sets text to dark green if the result is a tie
            Color darkGreen = new Color(0, 128, 0);
            result.setForeground(darkGreen);
        }
        
        //Display the computer's choice and the game result in the respective labels.
        userChoice.setText("User's choice: " + userChoices);
        compChoice.setText("Computer's choice: " + comChoice);
    }//GEN-LAST:event_paperActionPerformed

    //SCISSORS BUTTON
    private void scissorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scissorsActionPerformed
        // Hides the welcome menu
        welcome.setVisible(false);
        //Set the player's choice to "Scissors."
        userChoices = "Scissors";
        //Call a function to determine the computer's choice randomly (Rock, Paper, or Scissors).
        comChoice = randz();
        //Call a function to determine the game result (Win, Lose, or Draw) based on choices.
        if(gameResult(userChoices,comChoice).equals("Draw")){           
            result.setText("Its a tie!");
            //Sets text to black if the result is a tie
            result.setForeground(Color.BLACK);
        }
        else if(gameResult(userChoices,comChoice).equals("Lose")){           
            result.setText("Paper covers rock, Computer wins!");
            //Sets text to red if the result is a tie
            result.setForeground(Color.RED);
        }
        else if(gameResult(userChoices,comChoice).equals("Win")){
            result.setText("Rock crushes scissors, User wins!");
            //Sets text to dark green if the result is a tie
            Color darkGreen = new Color(0, 128, 0);
            result.setForeground(darkGreen);
        }
        
        //Display the computer's choice and the game result in the respective labels.
        userChoice.setText("User's choice: " + userChoices);
        compChoice.setText("Computer's choice: " + comChoice);
    }//GEN-LAST:event_scissorsActionPerformed

 // 5. Create a function to determine the computer's choice randomly:
    public String randz(){
        int max = 2;
        int min = 0;
        int randInt = (int)(Math.random() * (max - min + 1) + min);
        
        if(randInt == 0){
            comChoice = "Rock";
        }
        else if(randInt == 1){
            comChoice = "Paper";
        }
        else{
            comChoice = "Scissors";
        }
        
        return comChoice;
    }

// 6. Create a function to determine the game result:    
    public String gameResult(String user, String com){
        String finalResult = "";
        
        //Compare the player's choice and the computer's choice.
        if(user.equals(com)){
            //If they are the same, set the result to "Draw."
            finalResult = "Draw";
        }
        else if(user.equals("Rock") && com.equals("Paper")){
            //Otherwise, set the result to "Lose."
            finalResult = "Lose";
        }
        else if(user.equals("Rock") && com.equals("Scissors")){
            //Otherwise, if the player wins, set the result to "Win."
            finalResult = "Win";
        }
        else if(user.equals("Paper") && com.equals("Rock")){
            //Otherwise, if the player wins, set the result to "Win."
            finalResult = "Win";
        }
        else if(user.equals("Paper") && com.equals("Scissors")){
            //Otherwise, set the result to "Lose."
            finalResult = "Lose";
        }
        else if(user.equals("Scissors") && com.equals("Rock")){
            //Otherwise, set the result to "Lose."
            finalResult = "Lose";
        }
        else if(user.equals("Scissors") && com.equals("Paper")){
            //Otherwise, if the player wins, set the result to "Win."
            finalResult = "Win";
        }
        
        //Return the game result.
        return finalResult;
    }
    
// 7. Add any necessary components to reset the game (e.g., a "Play Again" button):
    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        //If the player wants to play again, reset the game variables and clear labels.
        welcome.setVisible(true);
        userChoice.setText(" ");
        compChoice.setText(" ");
        result.setText(" ");
    }//GEN-LAST:event_resetActionPerformed

//This function exits the program if EXIT button is pressed
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    
// 8. Implement the main function:
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel compChoice;
    private javax.swing.JButton exit;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton paper;
    private javax.swing.JButton reset;
    private javax.swing.JLabel result;
    private javax.swing.JButton rock;
    private javax.swing.JButton scissors;
    private javax.swing.JLabel title;
    private javax.swing.JLabel userChoice;
    private javax.swing.JScrollPane welcome;
    // End of variables declaration//GEN-END:variables
}
// 9. End of the program.
